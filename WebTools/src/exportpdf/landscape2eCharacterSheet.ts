import i18next from "i18next";
import { SimpleColor } from "../common/colour";
import { BaseFormFillingSheet } from "./baseFormFillingSheet";
import { Column } from "./column";
import { SheetTag } from "./icharactersheet";
import { PDFDocument, PDFForm, PDFPage, PDFTextField } from "@cantoo/pdf-lib";
import { Construct, Stereotype } from "../common/construct";
import { TalentWriter } from "./talentWriter";
import { Character, Division } from "../common/character";
import { assembleWritableItems } from "./generatedsheet";
import { FontLibrary, FontType } from "./fontLibrary";
import { labelWriter } from "./labelWriter";
import { TextAlign } from "./textAlign";
import { Era } from "../helpers/eras";
import { CheckMarkMaker } from "./checkMarkMaker";
import { staTextFieldAppearanceProvider } from "../helpers/pdfTextFieldAppearance";
import { CareersHelper } from "../helpers/careers";
import { WeaponDescriber } from "./weaponDescriber";
import { CHALLENGE_DICE_NOTATION } from "../common/challengeDiceNotation";
import { CharacterType, CharacterTypeModel } from "../common/characterType";
import { TracksHelper } from "../helpers/tracks";
import { divisionColour2e, greyColour2e, labelColourProvider, redColour2e } from "./colourProvider2e";

export class Landscape2eCharacterSheet extends BaseFormFillingSheet {

    static readonly arrowHead = "m 22.388463,8.231562 c 1.65,2.987 3.083,5.945 4.299,8.875 1.332,3.358 2.485,6.873 3.459,10.545 0.975,3.673 2.041,8.533 3.199,14.58 0.116,0.612 0.203,1.066 0.261,1.363 -1.255,-2.708 -2.548,-4.962 -3.879,-6.761 -0.445,-0.575 -1.004,-1.178 -1.679,-1.809 -0.676,-0.63 -1.245,-1.094 -1.708,-1.391 l -0.029,-0.027 c -1.545,-0.835 -3.088,-1.104 -4.632,-0.807 -1.081,0.204 -2.611,0.992 -4.589,2.365 -1.978,1.372 -4.135,3.134 -6.47,5.286 -3.358,3.079 -6.793,6.677 -10.306,10.795 0.56,-6.64 1.593,-13.104 3.098,-19.392 2.76,-11.333 7.343,-21.665 13.751,-30.995 l 0.26,-0.417 c 1.66,2.207 3.315,4.804 4.965,7.79 z";
    static readonly arrowHeadCommand = "m 21.781303,25.97048 -2.581,-1.47 -1.583,-16.265 -1.583,16.265 -2.582,1.47 2.315,1.675 -0.667,4.361 2.517,-3.553 2.517,3.553 -0.667,-4.361 z";
    static readonly arrowHeadScience = "m 17.929687,13.525391 c -1.211473,-0.078 -2.410646,0.200111 -3.451171,0.802734 -2.993341,1.734956 -3.948221,5.664653 -2.15625,8.755859 1.791849,3.091166 5.676806,4.213676 8.669921,2.478516 2.992104,-1.734933 3.946837,-5.66319 2.15625,-8.753906 -1.105135,-1.907019 -3.068171,-3.145364 -5.21875,-3.283203 z m -0.05078,0.796875 c 1.340421,0.08591 2.4964,0.793282 3.464844,1.730468 -0.422801,-0.173066 -0.856783,-0.336831 -1.351563,-0.382812 -1.278338,-0.1188 -2.750085,0.165332 -4.154296,0.86914 -1.403992,0.704283 -2.485036,1.698796 -3.101563,2.775391 -0.244719,0.427336 -0.350891,0.877069 -0.433594,1.322266 -0.349495,-2.215752 0.597074,-4.46896 2.578125,-5.617188 0.902535,-0.522705 1.941969,-0.765261 2.998047,-0.697265 z m 2.041016,2.144531 c 1.101988,0.102411 1.933802,0.542997 2.326172,1.238281 0.391947,0.695374 0.313355,1.565897 -0.207032,2.474609 -0.520386,0.908713 -1.48585,1.81506 -2.765625,2.457032 -1.280086,0.641597 -2.620652,0.891313 -3.722656,0.789062 -1.102004,-0.102251 -1.933937,-0.544346 -2.326172,-1.240234 -0.391946,-0.695374 -0.313355,-1.563944 0.207032,-2.472656 0.520386,-0.908713 1.483897,-1.81506 2.763671,-2.457032 1.280045,-0.641574 2.622622,-0.891473 3.72461,-0.789062 z m 3.246094,2.785156 c 0.350912,2.216524 -0.5947,4.470209 -2.576172,5.619141 -2.177955,1.262598 -4.843014,0.713425 -6.603516,-1.072266 0.455232,0.205502 0.944649,0.373205 1.490235,0.423828 1.278417,0.11862 2.752079,-0.167303 4.156249,-0.871094 1.403992,-0.704282 2.483083,-1.698795 3.09961,-2.77539 0.245046,-0.427906 0.351017,-0.878432 0.433594,-1.324219 z";
    static readonly arrowHeadOperations = "m 22.347503,28.115082 c 0.062,0.053 0.049,0.076 -0.029,0.052 l -10.075,-3.115 c -0.078,-0.024 -0.144,-0.11 -0.149,-0.191 l -0.404,-7.781 c -0.004,-0.082 0.05,-0.179 0.122,-0.218 l 5.899,-3.201 c 0.071,-0.039 0.186,-0.036 0.256,0.006 l 4.506,2.702 c 0.07,0.042 0.121,0.142 0.114,0.223 l -0.535,6.459 c -0.007,0.081 -0.078,0.159 -0.158,0.173 l -4.263,0.759 -1.754,-3.507 c -0.036,-0.073 -0.009,-0.099 0.062,-0.059 0,0 1.971,2.363 3.511,2.015 1.54,-0.348 2.029,-2.297 2.099,-3.272 0.07,-0.974 -0.769,-3.759 -4.058,-3.829 -3.289,-0.069 -4.829,2.853 -4.829,4.525 0,4.317 9.685,8.259 9.685,8.259";

    static readonly klingonSymbol = "m 10.166206,32.73599 c -1.908,3.269 -11.152,2.651 -10.08,15.528 0.022,0.255 6.992,-8.445 16.436,-5.721 z m 13.74048,-0.1662 c 3.862,6.797 14.052,6.983 14.052,6.983 0,0 -11.397,7.999 -20.277,2.84 z m -6.903641,8.442958 6.015797,-9.704679 C 19.894391,27.71822 16.975266,0 16.975266,0 c 0,0 -2.890838,27.754579 -6.015753,31.343718 z";
    static readonly klingonSymbolCircle = "m 17.116606,22.17999 c 6.749,0 12.24,5.491 12.24,12.24 0,6.749 -5.491,12.24 -12.24,12.24 -6.749,0 -12.24,-5.491 -12.24,-12.24 0,-6.749 5.491,-12.24 12.24,-12.24 m 0,-1.109 c -7.372,0 -13.349,5.977 -13.349,13.349 0,7.371 5.977,13.348 13.349,13.348 7.372,0 13.349,-5.977 13.349,-13.348 0,-7.372 -5.977,-13.349 -13.349,-13.349";


    static readonly federationLaurels = "M 26.832031,0 C 16.653041,0 8.3710938,8.2259476 8.3710938,18.335938 c 0,10.108989 8.2819472,18.332031 18.4609372,18.332031 10.17999,0 18.462891,-8.223042 18.462891,-18.332031 C 45.294922,8.2259476 37.012021,0 26.832031,0 Z m 0,0.1914062 c 10.07499,0 18.271485,8.1385882 18.271485,18.1425778 0,10.00399 -8.196495,18.142579 -18.271485,18.142578 -10.07399,0 -18.269531,-8.138588 -18.269531,-18.142578 0,-0.312624 0.00762,-0.62285 0.023437,-0.93164 C 9.0762021,7.8298337 17.072854,0.1914062 26.832031,0.1914062 Z m -0.0059,0.66210942 c -9.68799,0 -17.5703126,7.82627528 -17.5703126,17.44726538 0,9.620991 7.8823226,17.449219 17.5703126,17.449219 9.68699,0 17.566406,-7.828228 17.566406,-17.449219 0,-9.6209901 -7.879416,-17.44726538 -17.566406,-17.44726538 z m 0,0.67968748 c 9.312991,0 16.888672,7.5215874 16.888672,16.7675779 0,9.246991 -7.575681,16.769532 -16.888672,16.769531 -9.312991,0 -16.8906251,-7.52254 -16.8906251,-16.769531 0,-9.2459905 7.5776341,-16.7675779 16.8906251,-16.7675779 z M 15.240234,30.964844 c 0.611936,0.552303 1.265682,1.062245 1.953125,1.523437 -0.687443,-0.461192 -1.341189,-0.971134 -1.953125,-1.523437 z m 23.167969,0 c -0.611956,0.552303 -1.263721,1.062245 -1.951172,1.523437 0.687451,-0.461192 1.339216,-0.971134 1.951172,-1.523437 z m -20.517578,1.96875 c 0.473631,0.285781 0.962706,0.548791 1.464844,0.789062 0.502137,0.240272 1.019118,0.456543 1.546875,0.648438 -0.527757,-0.191895 -1.044738,-0.408166 -1.546875,-0.648438 -0.502138,-0.240271 -0.991213,-0.503281 -1.464844,-0.789062 z m 17.867187,0 c -0.473632,0.285781 -0.96076,0.548791 -1.46289,0.789062 -0.502131,0.240272 -1.019135,0.456543 -1.546875,0.648438 0.52774,-0.191895 1.044744,-0.408166 1.546875,-0.648438 0.50213,-0.240271 0.989258,-0.503281 1.46289,-0.789062 z m -11.55664,2.279297 c 0.8555,0.12981 1.73297,0.197265 2.625,0.197265 0.891936,0 1.767608,-0.06746 2.623047,-0.197265 -0.855439,0.12981 -1.731111,0.197265 -2.623047,0.197265 -0.89203,0 -1.7695,-0.06746 -2.625,-0.197265 z M 32.62607,40.8482 c -0.641,0.082 -4.039,-0.668 -4.039,-1.331 0,-0.664 3.595,-2.181 4.517,-2.246 0.649,-0.047 4.154,-0.736 5.395,-1.683 -0.213,0.89 -0.361,0.987 -0.295,1.421 -0.025,0.195 0.978,0.49 1.275,0.523 -1.217,0.327 -2.147,0.613 -3.143,0.571 -4.787,-0.196 -10.085,1.978 -1.686,1.488 -1.974,0.784 -1.786,1.167 -2.024,1.257 m 13.622636,-5.865973 c -1.747207,1.983088 -5.158135,2.327234 -6.926587,1.665917 -0.0493,-1.199359 1.481917,-4.337121 2.01625,-4.663516 0.04827,0.235673 0.02454,2.9979 0.156008,3.030121 2.21246,0.596117 3.80873,0.02523 4.754329,-0.03252 m -1.867226,-2.85805 c 2.646667,0.375035 4.377312,-0.44017 5.010281,-0.555009 -1.266874,2.164483 -5.051351,2.842556 -6.647098,2.465795 -0.287729,-0.979898 0.420693,-4.461524 0.831511,-4.982607 0.139694,1.046649 0.353996,1.681866 0.805306,3.071821 m 2.575476,-3.645225 c 3.35577,-0.244537 5.478529,-3.242636 6.054322,-3.635135 -1.399132,4.689798 -4.047586,5.858092 -7.470326,5.955144 -0.599826,-0.963588 -0.353348,-4.999081 0.116131,-5.620485 0.03191,0.360399 0.747733,2.92482 1.299873,3.300476 m 1.48035,-4.082146 c 2.732004,-1.193564 4.451334,-4.386478 5.265311,-5.653458 0.164122,3.447947 -2.016737,7.68721 -5.95621,8.006106 -0.674799,-1.020485 -1.341153,-4.820198 -1.077396,-5.122113 0.156264,0.138649 1.084986,2.459364 1.768295,2.769465 m 0.566815,-1.838711 c -0.591456,-0.366579 -1.973863,-3.675092 -1.948645,-4.459718 0.188728,0.376061 1.982221,2.058071 2.048643,2.024769 2.390718,-1.186902 3.748351,-5.682983 3.898249,-5.77491 0.361796,2.132643 -0.196106,6.919786 -3.998247,8.209859 m -2.326947,-8.488344 c 0.09806,0.06543 1.678246,1.078225 2.517663,1.242968 1.381961,-1.863213 1.743328,-4.281102 1.907142,-5.163787 1.711308,3.627609 -0.673588,7.1892 -1.824897,8.071756 -0.773131,-0.546815 -2.648674,-3.66013 -2.599908,-4.150937 m 2.254474,-0.01568 c -0.675084,-0.236167 -3.315815,-3.079366 -3.256913,-3.348477 1.380868,0.489926 1.446922,0.832922 2.434065,0.734951 0.591944,-1.01355 0.296032,-4.1012053 0.32908,-4.885323 2.541546,3.4405586 0.707459,7.221892 0.493768,7.498849 M 43.37759,6.327 c 0.513,0.232 1.884,0.874 2.477,0.809 0.23,-1.994 -0.51,-3.391 -0.544,-3.521 0.165,-0.131 2.732,2.59 2.337,6.511 -1.818,-0.727 -3.62,-2.884 -4.286,-3.774 z M 42.17687,1.3922 c 1.349,0.49 2.724,3.537 2.69,4.289 -3.192,-0.262 -5.98,-4.681 -6.088,-5.04 0.625,-0.196 3.25,1.535 3.645,2.083 0,0 -0.052,0.067 0.024,-0.016 0.025,-0.369 -0.247,-1.12 -0.271,-1.275 z M 21.08495,40.8396 c 0.641,0.082 4.039,-0.667 4.039,-1.331 0,-0.664 -3.594,-2.182 -4.516,-2.246 -0.649,-0.047 -4.154,-0.736 -5.397,-1.684 0.214,0.891 0.362,0.989 0.296,1.422 0.025,0.196 -0.978,0.49 -1.274,0.523 1.218,0.326 2.147,0.613 3.142,0.572 4.786,-0.197 10.085,1.976 1.687,1.486 1.973,0.784 1.785,1.168 2.023,1.258 M 7.4617002,34.975548 c 1.7485818,1.983421 5.1581348,2.327234 6.9274408,1.665396 0.04877,-1.200213 -1.481917,-4.337121 -2.01625,-4.663516 -0.04913,0.236194 -0.02369,2.997379 -0.156529,3.029268 -2.212793,0.597491 -3.8082094,0.02609 -4.7546618,-0.03115 M 9.3287135,32.116628 C 6.684331,32.491917 4.9522499,31.674305 4.3198976,31.560417 c 1.2667649,2.164749 5.0499236,2.842983 6.6468574,2.46726 0.287433,-0.979983 -0.421278,-4.462043 -0.831602,-4.982242 -0.1392694,1.045279 -0.3528376,1.682729 -0.8064395,3.071193 M 6.7547826,28.47095 C 3.3987831,28.226322 1.2759567,25.226962 0.70000141,24.835586 2.097942,29.525477 4.7484491,30.693365 8.1687344,30.78987 8.769835,29.826023 8.5234103,25.79146 8.0547227,25.170705 8.0216093,25.529382 7.305713,28.0952 6.7547826,28.47095 M 5.2739541,24.387208 C 2.5419498,23.193644 0.82262008,20.00073 0.00864281,18.73375 -0.15547948,22.181697 2.0247025,26.422202 5.9648531,26.739856 6.6393704,25.718411 7.3060065,21.919658 7.0422494,21.617743 6.8862667,21.757351 5.9572631,24.077107 5.2739541,24.387208 M 4.7064378,22.54839 C 5.2989555,22.180006 6.6806624,18.872124 6.6557947,18.088488 6.4679182,18.464434 4.6728485,20.147775 4.6074383,20.114405 2.2161929,18.926606 0.85729273,14.429121 0.70847058,14.338094 0.34687638,16.47155 0.90689106,21.258741 4.7064378,22.54839 m 2.3276486,-8.485837 c -0.098058,0.06543 -1.6768349,1.07814 -2.517,1.24222 -1.383288,-1.861717 -1.7439914,-4.280354 -1.9078057,-5.163039 -1.71130728,3.627609 0.673588,7.1892 1.8241484,8.071093 0.7745432,-0.546901 2.6500865,-3.660216 2.6006573,-4.150274 M 4.7807027,14.046192 C 5.4544499,13.810445 8.0948462,10.967587 8.0383585,10.697189 6.6557542,11.186994 6.5898195,11.530012 5.6026435,11.432383 5.0103484,10.41904 5.3070964,7.3318851 5.2747311,6.5480796 2.7311654,9.9864085 4.5669162,13.769309 4.7807027,14.046192 M 10.33367,6.3174 c -0.513,0.232 -1.885,0.874 -2.477,0.809 -0.23,-1.993 0.511,-3.39 0.543,-3.522 -0.164,-0.13 -2.73,2.591 -2.337,6.512 1.82,-0.728 3.62,-2.884 4.288,-3.775 z m 1.20048,-4.9328 c -1.349,0.49 -2.723,3.537 -2.69,4.288 3.192,-0.26 5.981,-4.68 6.088,-5.04 -0.626,-0.196 -3.249,1.536 -3.645,2.083 0,0 0.054,0.067 -0.024,-0.016 -0.025,-0.367 0.246,-1.119 0.271,-1.274 z";
    static readonly federationStarfield = "m 22.63871,25.0022 c 0,-0.224 -0.181,-0.405 -0.407,-0.405 -0.225,0 -0.409,0.181 -0.409,0.405 0,0.224001 0.184,0.405001 0.409,0.405001 0.226,0 0.407,-0.181 0.407,-0.405001 m -2.12352,2.6436 c 0,0.273001 0.224,0.496001 0.499,0.496001 0.274,0 0.497,-0.223 0.497,-0.496001 0,-0.274 -0.223,-0.496 -0.497,-0.496 -0.275,0 -0.499,0.222 -0.499,0.496 m 2.54,-5.5274 c 0,-0.212 -0.173,-0.382 -0.385,-0.382 -0.213,0 -0.386,0.17 -0.386,0.382 0,0.211 0.173,0.383001 0.386,0.383001 0.212,0 0.385,-0.172001 0.385,-0.383001 m -2.64152,6.120599 c -0.226,0 -0.408,0.183 -0.408,0.406001 0,0.224 0.182,0.406 0.408,0.406 0.224,0 0.408,-0.182 0.408,-0.406 0,-0.223001 -0.184,-0.406001 -0.408,-0.406001 m 0.84384,0.6178 c -0.276,0 -0.499,0.222 -0.499,0.496001 0,0.273 0.223,0.495 0.499,0.495 0.275,0 0.499,-0.222 0.499,-0.495 0,-0.274001 -0.224,-0.496001 -0.499,-0.496001 m 1.7686,-3.2986 c -0.426,0 -0.772001,0.343 -0.772001,0.765 0,0.423001 0.346001,0.767001 0.772001,0.767001 0.426,0 0.771001,-0.344 0.771001,-0.767001 0,-0.422 -0.345001,-0.765 -0.771001,-0.765 m 2.1912,-4.5362 c -0.25,0 -0.454,0.202 -0.454,0.451001 0,0.249 0.204,0.45 0.454,0.45 0.25,0 0.453,-0.201 0.453,-0.45 0,-0.249001 -0.203,-0.451001 -0.453,-0.451001 m -3.50208,-6.329206 c -0.717001,4.113004 -0.051,3.396003 -4.163003,4.133004 4.139003,0.779 3.418002,0.008 4.163003,4.134003 0.781001,-4.154003 -0.051,-3.382003 4.162003,-4.134003 -4.186003,-0.708001 -3.409002,0.008 -4.162003,-4.133004 m 3.37248,8.461006 c -0.214,0 -0.386,0.171001 -0.386,0.383001 0,0.212 0.172,0.383 0.386,0.383 0.212,0 0.385,-0.171 0.385,-0.383 0,-0.212 -0.173,-0.383001 -0.385,-0.383001 M 24.89595,20.184 c 0,-0.224 -0.183,-0.406 -0.41,-0.406 -0.225,0 -0.408,0.182 -0.408,0.406 0,0.224001 0.183,0.406001 0.408,0.406001 0.227,0 0.41,-0.182 0.41,-0.406001 m -6.80308,9.860799 c -0.226,0 -0.408,0.182 -0.408,0.406001 0,0.223 0.182,0.405 0.408,0.405 0.225,0 0.408,-0.182 0.408,-0.405 0,-0.224001 -0.183,-0.406001 -0.408,-0.406001 m 2.77492,-7.1568 c -0.225,0 -0.409,0.182 -0.409,0.406001 0,0.223 0.184,0.405 0.409,0.405 0.225,0 0.408,-0.182 0.408,-0.405 0,-0.224001 -0.183,-0.406001 -0.408,-0.406001 m -2.12644,2.8848 c -0.225,0 -0.408,0.181 -0.408,0.406001 0,0.223 0.183,0.405 0.408,0.405 0.226,0 0.408,-0.182 0.408,-0.405 0,-0.225001 -0.182,-0.406001 -0.408,-0.406001 M 16.66751,18.4608 c 0,-0.224 -0.183,-0.406 -0.409,-0.406 -0.225,0 -0.408,0.182 -0.408,0.406 0,0.224001 0.183,0.405001 0.408,0.405001 0.226,0 0.409,-0.181 0.409,-0.405001 m 0.6948,9.392799 c -0.225,0 -0.408,0.182 -0.408,0.405001 0,0.224 0.183,0.406 0.408,0.406 0.224,0 0.408,-0.182 0.408,-0.406 0,-0.223001 -0.184,-0.405001 -0.408,-0.405001 M 19.21835,19.6988 c 0,-0.199 -0.163,-0.36 -0.363,-0.36 -0.201,0 -0.363,0.161 -0.363,0.36 0,0.199 0.162,0.360001 0.363,0.360001 0.2,0 0.363,-0.161001 0.363,-0.360001 m 1.14612,6.1912 c 0.226,0 0.408,-0.182 0.408,-0.406 0,-0.223 -0.182,-0.405 -0.408,-0.405 -0.226,0 -0.408,0.182 -0.408,0.405 0,0.224 0.182,0.406 0.408,0.406 m -1.12072,-1.332801 c -0.3,0 -0.542,0.242 -0.542,0.540001 0,0.299 0.242,0.541 0.542,0.541 0.301,0 0.546,-0.242 0.546,-0.541 0,-0.298001 -0.245,-0.540001 -0.546,-0.540001 m 0.39032,-1.7652 c -0.225,0 -0.407,0.182 -0.407,0.405001 0,0.224 0.182,0.406 0.407,0.406 0.226,0 0.409,-0.182 0.409,-0.406 0,-0.223001 -0.183,-0.405001 -0.409,-0.405001 m -3.21328,5.085 c -0.203,0 -0.367,0.163001 -0.367,0.365001 0,0.201 0.164,0.365 0.367,0.365 0.203,0 0.367,-0.164 0.367,-0.365 0,-0.202 -0.164,-0.365001 -0.367,-0.365001 m 21.34156,-0.8694 c -0.221,0 -0.4,0.178001 -0.4,0.397001 0,0.219 0.179,0.396 0.4,0.396 0.221,0 0.399,-0.177 0.399,-0.396 0,-0.219 -0.178,-0.397001 -0.399,-0.397001 M 39.24787,15.3966 c 0,-0.299 -0.243,-0.541 -0.543,-0.541 -0.302,0 -0.546,0.242 -0.546,0.541 0,0.299001 0.244,0.541001 0.546,0.541001 0.3,0 0.543,-0.242 0.543,-0.541001 m -1.86964,-3.0298 c 0,-0.199 -0.163,-0.36 -0.362,-0.36 -0.202,0 -0.365,0.161 -0.365,0.36 0,0.199 0.163,0.361001 0.365,0.361001 0.199,0 0.362,-0.162001 0.362,-0.361001 m 0.32564,1.1122 c 0,-0.199 -0.164,-0.361 -0.364,-0.361 -0.2,0 -0.363,0.162 -0.363,0.361 0,0.199 0.163,0.360001 0.363,0.360001 0.2,0 0.364,-0.161001 0.364,-0.360001 m 2.44404,9.293799 c -0.326,0 -0.59,0.263 -0.59,0.585001 0,0.324 0.264,0.586 0.59,0.586 0.325,0 0.59,-0.262 0.59,-0.586 0,-0.322001 -0.265,-0.585001 -0.59,-0.585001 M 39.77691,19.619 c 0,-0.223 -0.182,-0.405 -0.408,-0.405 -0.225,0 -0.409,0.182 -0.409,0.405 0,0.224001 0.184,0.406001 0.409,0.406001 0.226,0 0.408,-0.182 0.408,-0.406001 m 0.89036,-3.713801 c -0.301,0 -0.544,0.241 -0.544,0.540001 0,0.299 0.243,0.541 0.544,0.541 0.3,0 0.544,-0.242 0.544,-0.541 0,-0.299001 -0.244,-0.540001 -0.544,-0.540001 m -4.54432,-0.0398 c -0.251,0 -0.455,0.202 -0.455,0.450001 0,0.249 0.204,0.45 0.455,0.45 0.251,0 0.453,-0.201 0.453,-0.45 0,-0.248001 -0.202,-0.450001 -0.453,-0.450001 m -8.797919,8.958602 C 27.325031,24.45 27.02003,24.148 26.64503,24.148 c -0.376,0 -0.681001,0.302 -0.681001,0.676001 0,0.373 0.305001,0.675 0.681001,0.675 0.375,0 0.680001,-0.302 0.680001,-0.675 m 1.511719,7.668798 c -0.225,0 -0.409,0.181 -0.409,0.405001 0,0.224 0.184,0.406 0.409,0.406 0.224,0 0.408,-0.182 0.408,-0.406 0,-0.224001 -0.184,-0.405001 -0.408,-0.405001 m 6.94508,-11.8128 c -0.225,0 -0.408,0.183 -0.408,0.406001 0,0.224 0.183,0.405 0.408,0.405 0.225,0 0.408,-0.181 0.408,-0.405 0,-0.223001 -0.183,-0.406001 -0.408,-0.406001 m -6.88028,5.8732 c -0.214,0 -0.386,0.171001 -0.386,0.383001 0,0.211 0.172,0.382 0.386,0.382 0.213,0 0.385,-0.171 0.385,-0.382 0,-0.212 -0.172,-0.383001 -0.385,-0.383001 m -1.57468,1.8956 c -0.226,0 -0.408,0.182 -0.408,0.405001 0,0.224 0.182,0.406 0.408,0.406 0.225,0 0.408,-0.182 0.408,-0.406 0,-0.223001 -0.183,-0.405001 -0.408,-0.405001 m 1.28476,1.099001 c 0,-0.223 -0.182,-0.405 -0.408,-0.405 -0.225,0 -0.409,0.182 -0.409,0.405 0,0.224001 0.184,0.406001 0.409,0.406001 0.226,0 0.408,-0.182 0.408,-0.406001 m 6.42432,-13.879001 c -0.226,0 -0.409,0.182 -0.409,0.406001 0,0.223 0.183,0.405 0.409,0.405 0.225,0 0.408,-0.182 0.408,-0.405 0,-0.224001 -0.183,-0.406001 -0.408,-0.406001 m -3.30488,3.681396 c -0.516,2.961003 -0.037,2.445002 -2.996002,2.976003 2.979002,0.561 2.460002,0.005 2.996002,2.976002 0.563,-2.991002 -0.037,-2.436002 2.997002,-2.976002 -3.014002,-0.511001 -2.454002,0.005 -2.997002,-2.976003 m -1.70972,8.798004 c -0.304,0 -0.549,0.244 -0.549,0.546001 0,0.3 0.245,0.544 0.549,0.544 0.302,0 0.549,-0.244 0.549,-0.544 0,-0.302001 -0.247,-0.546001 -0.549,-0.546001 M 29.76167,26.8194 c 0.213,0 0.385,-0.173 0.385,-0.383 0,-0.212 -0.172,-0.383 -0.385,-0.383 -0.213,0 -0.386,0.171 -0.386,0.383 0,0.21 0.173,0.383 0.386,0.383 m -1.345479,-5.732599 c 0,-0.348001 -0.285001,-0.630001 -0.635001,-0.630001 -0.351,0 -0.635001,0.282 -0.635001,0.630001 0,0.348 0.284001,0.63 0.635001,0.63 0.35,0 0.635001,-0.282 0.635001,-0.63 M 36.05735,14.2716 c 0.226,0 0.409,-0.181 0.409,-0.406 0,-0.223 -0.183,-0.405 -0.409,-0.405 -0.224,0 -0.408,0.182 -0.408,0.405 0,0.225 0.184,0.406 0.408,0.406 M 34.56431,13.433 c 0.226,0 0.408,-0.182 0.408,-0.406 0,-0.223 -0.182,-0.404 -0.408,-0.404 -0.225,0 -0.407,0.181 -0.407,0.404 0,0.224 0.182,0.406 0.407,0.406 m -2.14124,6.449599 c -0.203,0 -0.367,0.164001 -0.367,0.366001 0,0.201 0.164,0.364 0.367,0.364 0.202,0 0.366,-0.163 0.366,-0.364 0,-0.202 -0.164,-0.366001 -0.366,-0.366001 M 35.21327,9.7934 c 0.201,0 0.363,-0.161 0.363,-0.36 0,-0.199 -0.162,-0.36 -0.363,-0.36 -0.199,0 -0.362,0.161 -0.362,0.36 0,0.199 0.163,0.36 0.362,0.36 m -2.9688,7.843399 c -0.386,0 -0.698001,0.31 -0.698001,0.693 0,0.383001 0.312001,0.694001 0.698001,0.694001 0.385,0 0.698001,-0.311 0.698001,-0.694001 0,-0.383 -0.313001,-0.693 -0.698001,-0.693 M 33.24195,15.9294 c 0,0.299001 0.242,0.541001 0.543,0.541001 0.302,0 0.546,-0.242 0.546,-0.541001 0,-0.299 -0.244,-0.541 -0.546,-0.541 -0.301,0 -0.543,0.242 -0.543,0.541 m 0.80372,3.4508 c 0.225,0 0.408,-0.182 0.408,-0.405 0,-0.224 -0.183,-0.405 -0.408,-0.405 -0.225,0 -0.408,0.181 -0.408,0.405 0,0.223 0.183,0.405 0.408,0.405 m -1.88364,-4.2896 c 0,-0.249 -0.203,-0.451 -0.453,-0.451 -0.251,0 -0.454,0.202 -0.454,0.451 0,0.248001 0.203,0.450001 0.454,0.450001 0.25,0 0.453,-0.202 0.453,-0.450001 m 1.1214,3.0008 c 0.225,0 0.408,-0.182 0.408,-0.406 0,-0.223 -0.183,-0.404 -0.408,-0.404 -0.226,0 -0.409,0.181 -0.409,0.404 0,0.224 0.183,0.406 0.409,0.406 M 12.88247,14.6952 c 0.202,0 0.364,-0.162 0.364,-0.361 0,-0.198 -0.162,-0.36 -0.364,-0.36 -0.199,0 -0.362,0.162 -0.362,0.36 0,0.199 0.163,0.361 0.362,0.361 m 0.82076,7.8246 c 0,-0.298 -0.244,-0.54 -0.545,-0.54 -0.3,0 -0.544,0.242 -0.544,0.54 0,0.299001 0.244,0.541001 0.544,0.541001 0.301,0 0.545,-0.242 0.545,-0.541001 m 0.02412,2.948199 c -0.225,0 -0.409,0.181 -0.409,0.406001 0,0.224 0.184,0.405 0.409,0.405 0.225,0 0.407,-0.181 0.407,-0.405 0,-0.225001 -0.182,-0.406001 -0.407,-0.406001 M 32.87395,14.7696 c 0,0.224001 0.183,0.405001 0.41,0.405001 0.224,0 0.408,-0.181 0.408,-0.405001 0,-0.224 -0.184,-0.405 -0.408,-0.405 -0.227,0 -0.41,0.181 -0.41,0.405 m -19.55976,6.075 c 0,-0.299 -0.244,-0.541 -0.543,-0.541 -0.303,0 -0.546,0.242 -0.546,0.541 0,0.299001 0.243,0.541001 0.546,0.541001 0.299,0 0.543,-0.242 0.543,-0.541001 m 25.94068,-6.2268 c 0.203,0 0.367,-0.163 0.367,-0.365 0,-0.202 -0.164,-0.365 -0.367,-0.365 -0.202,0 -0.367,0.163 -0.367,0.365 0,0.202 0.165,0.365 0.367,0.365 m -1.47624,-3.9354 c 0.2,0 0.363,-0.162 0.363,-0.361 0,-0.199 -0.163,-0.36 -0.363,-0.36 -0.201,0 -0.363,0.161 -0.363,0.36 0,0.199 0.162,0.361 0.363,0.361 M 16.372669,25.292001 c 0,0.373 0.305001,0.676 0.681001,0.676 0.376,0 0.681001,-0.303 0.681001,-0.676 0,-0.373001 -0.305001,-0.676001 -0.681001,-0.676001 -0.376,0 -0.681001,0.303 -0.681001,0.676001 M 13.95407,16.049199 c -0.301,0 -0.544,0.243 -0.544,0.541001 0,0.299 0.243,0.54 0.544,0.54 0.301,0 0.544,-0.241 0.544,-0.54 0,-0.298001 -0.243,-0.541001 -0.544,-0.541001 M 36.30095,7.717 c 0.201,0 0.363,-0.162 0.363,-0.361 0,-0.199 -0.162,-0.361 -0.363,-0.361 -0.2,0 -0.363,0.162 -0.363,0.361 0,0.199 0.163,0.361 0.363,0.361 m 4.1064,5.53 c 0.301,0 0.544,-0.241 0.544,-0.54 0,-0.298 -0.243,-0.54 -0.544,-0.54 -0.3,0 -0.545,0.242 -0.545,0.54 0,0.299 0.245,0.54 0.545,0.54 M 25.72007,8.5398 c 0.228,0 0.413,-0.183 0.413,-0.409 0,-0.227 -0.185,-0.411 -0.413,-0.411 -0.228,0 -0.412,0.184 -0.412,0.411 0,0.226 0.184,0.409 0.412,0.409 m -2.23992,2.21 c 0.319,0 0.578,-0.257 0.578,-0.573 0,-0.316 -0.259,-0.573 -0.578,-0.573 -0.318,0 -0.577,0.257 -0.577,0.573 0,0.316 0.259,0.573 0.577,0.573 m 3.16536,6.3994 c 0.275,0 0.498,-0.222 0.498,-0.495 0,-0.274 -0.223,-0.496 -0.498,-0.496 -0.276,0 -0.499,0.222 -0.499,0.496 0,0.273 0.223,0.495 0.499,0.495 m 0.66716,2.8418 c 0,-0.224 -0.182,-0.406 -0.407,-0.406 -0.226,0 -0.408,0.182 -0.408,0.406 0,0.223001 0.182,0.405001 0.408,0.405001 0.225,0 0.407,-0.182 0.407,-0.405001 m -0.56996,-4.817 c 0.225,0 0.408,-0.182 0.408,-0.405 0,-0.225 -0.183,-0.406 -0.408,-0.406 -0.225,0 -0.409,0.181 -0.409,0.406 0,0.223 0.184,0.405 0.409,0.405 m -8.4072,-4.5418 c 0.326,0 0.59,-0.262 0.59,-0.585 0,-0.323 -0.264,-0.585 -0.59,-0.585 -0.324,0 -0.589,0.262 -0.589,0.585 0,0.323 0.265,0.585 0.589,0.585 m -0.77832,11.521 c 0.225,0 0.408,-0.182 0.408,-0.406 0,-0.223 -0.183,-0.405 -0.408,-0.405 -0.226,0 -0.408,0.182 -0.408,0.405 0,0.224 0.182,0.406 0.408,0.406 m 3.37536,-11.4064 c 0.228,0 0.413,-0.183 0.413,-0.409 0,-0.226 -0.185,-0.41 -0.413,-0.41 -0.228,0 -0.412,0.184 -0.412,0.41 0,0.226 0.184,0.409 0.412,0.409 m 10.97064,-5.907 c 0.251,0 0.454,-0.201 0.454,-0.45 0,-0.249 -0.203,-0.45 -0.454,-0.45 -0.25,0 -0.453,0.201 -0.453,0.45 0,0.249 0.203,0.45 0.453,0.45 m -9.18504,12.4968 c 0.2,0 0.362,-0.161 0.362,-0.36 0,-0.199 -0.162,-0.36 -0.362,-0.36 -0.201,0 -0.363,0.161 -0.363,0.36 0,0.199 0.162,0.36 0.363,0.36 M 21.06287,5.5198 c 0.295,0 0.535,-0.238 0.535,-0.532 0,-0.293 -0.24,-0.532 -0.535,-0.532 -0.296,0 -0.536,0.239 -0.536,0.532 0,0.294 0.24,0.532 0.536,0.532 m 9.0228,16.1006 c 0.226,0 0.409,-0.182 0.409,-0.405 0,-0.225 -0.183,-0.406 -0.409,-0.406 -0.225,0 -0.408,0.181 -0.408,0.406 0,0.223 0.183,0.405 0.408,0.405 m -0.71376,-3.950201 c -0.251,0 -0.453,0.202 -0.453,0.450001 0,0.25 0.202,0.45 0.453,0.45 0.251,0 0.453,-0.2 0.453,-0.45 0,-0.248001 -0.202,-0.450001 -0.453,-0.450001 M 29.99903,16.7448 c 0.563,-2.991 -0.036,-2.435 2.997,-2.977 -3.013,-0.51 -2.454,0.006 -2.997,-2.976 -0.517,2.962 -0.036,2.447 -2.997,2.976 2.981,0.561 2.461,0.006 2.997,2.977 M 28.96583,5.4252 c 0.225,0 0.409,-0.182 0.409,-0.405 0,-0.224 -0.184,-0.406 -0.409,-0.406 -0.225,0 -0.407,0.182 -0.407,0.406 0,0.223 0.182,0.405 0.407,0.405 m 0.14264,17.7886 c 0,-0.213 -0.172,-0.383 -0.385,-0.383 -0.213,0 -0.387,0.17 -0.387,0.383 0,0.212 0.174,0.383001 0.387,0.383001 0.213,0 0.385,-0.171001 0.385,-0.383001 m 1.04304,-4.915801 c -0.252,0 -0.455,0.202 -0.455,0.450001 0,0.249 0.203,0.451 0.455,0.451 0.249,0 0.453,-0.202 0.453,-0.451 0,-0.248001 -0.204,-0.450001 -0.453,-0.450001 M 27.12767,18.6852 c 0,-0.274 -0.222,-0.496 -0.499,-0.496 -0.275,0 -0.498,0.222 -0.498,0.496 0,0.273001 0.223,0.495001 0.498,0.495001 0.277,0 0.499,-0.222 0.499,-0.495001 m -0.43368,3.5462 c 0.225,0 0.408,-0.181 0.408,-0.405 0,-0.224 -0.183,-0.405 -0.408,-0.405 -0.225,0 -0.409,0.181 -0.409,0.405 0,0.224 0.184,0.405 0.409,0.405 m 1.27908,3.7052 c 0,0.262001 0.213,0.474001 0.476,0.474001 0.263,0 0.477,-0.212 0.477,-0.474001 0,-0.261 -0.214,-0.473 -0.477,-0.473 -0.263,0 -0.476,0.212 -0.476,0.473";

    static readonly talentsColumn3 = new Column(390.6, 361, 200, 162);
    static readonly talentsColumn2 = new Column(221.7, 361, 200, 162, this.talentsColumn3);
    static readonly talentsColumn1 = new Column(51.5, 373, 180, 162, this.talentsColumn2);

    static readonly tealColour: SimpleColor = SimpleColor.from("#39AAA3");
    static readonly greyColour: SimpleColor = SimpleColor.from("#979696");

    static readonly headingColumn = new Column(73.8, 45, 8.8, 200);

    fonts: FontLibrary = new FontLibrary();

    getName(): string {
        return i18next.t("Sheet.landscape2eCharacterSheet");
    }
    getThumbnailUrl(): string {
        return '/static/img/sheets/STA_2e_Landscape_Sheet_400.png'
    }
    getPdfUrl(): string {
        return '/static/pdf/STA_2e_Landscape_Sheet.pdf'
    }

    getDefaultFontPath() {
        return "/static/font/OpenSansCondensed-Light.ttf";
    }

    getTags(): SheetTag[] {
        return [ SheetTag.Landscape, SheetTag.Style2e, SheetTag.UsLetter, SheetTag.LanguageSupport, SheetTag.TalentText ];
    }

    async initializeFonts(pdf: PDFDocument) {
        await super.initializeFonts(pdf);

        const fontBytes = await fetch("/static/font/Michroma-Regular.ttf").then(res => res.arrayBuffer());
        this.headingFont = await pdf.embedFont(fontBytes);

        this.fonts.addFont(FontType.Standard, this.formFont);

        const boldFontBytes = await fetch("/static/font/OpenSansCondensed-Bold.ttf").then(res => res.arrayBuffer());
        const boldFont = await pdf.embedFont(boldFontBytes);
        this.fonts.addFont(FontType.Bold, boldFont);

        const italicFontBytes = await fetch("/static/font/OpenSansCondensed-LightItalic.ttf").then(res => res.arrayBuffer());
        const italicFont = await pdf.embedFont(italicFontBytes);
        this.fonts.addFont(FontType.Italic, italicFont);

        const symbolFontBytes = await fetch("/static/font/Trek_Arrowheads.ttf").then(res => res.arrayBuffer());
        const symbolFont = await pdf.embedFont(symbolFontBytes);
        this.fonts.addFont(FontType.Symbol, symbolFont);
    }

    async populate(pdf: PDFDocument, construct: Construct) {
        await super.populate(pdf, construct);

        const page = pdf.getPage(0);
        this.writeLabels(page, construct as Character);
        this.writeRoleAndTalents(page, construct as Character);
        this.writeTitle(page);

        this.createDeterminationBoxes(page, pdf);
        this.createStressBoxes(page, pdf, construct as Character);

        this.drawArrowHead(page, construct as Character);
    }

    drawArrowHead(page: PDFPage, character: Character) {
        if (character.type === CharacterType.Starfleet || character.type === CharacterType.Cadet) {

            const division = character.division;
            if (division != null) {
                page.moveTo(704, page.getHeight() - 63);

                page.drawSvgPath(Landscape2eCharacterSheet.arrowHead, {
                    borderColor: Landscape2eCharacterSheet.greyColour.asPdfRbg(),
                    color: SimpleColor.from("#ffffff").asPdfRbg(),
                    borderWidth: 1,
                    scale: 0.6
                });

                if (division === Division.Command) {
                    page.drawSvgPath(Landscape2eCharacterSheet.arrowHeadCommand, {
                        borderColor: Landscape2eCharacterSheet.greyColour.asPdfRbg(),
                        color: divisionColour2e(character.era, division).asPdfRbg(),
                        borderWidth: 0,
                        scale: 0.6
                    });
                } else if (division === Division.Science) {
                    page.drawSvgPath(Landscape2eCharacterSheet.arrowHeadScience, {
                        borderColor: SimpleColor.from("#ffffff").asPdfRbg(),
                        color: divisionColour2e(character.era, division).asPdfRbg(),
                        borderWidth: 0,
                        scale: 0.6
                    });
                } else if (division === Division.Operations) {
                    page.drawSvgPath(Landscape2eCharacterSheet.arrowHeadOperations, {
                        borderColor: SimpleColor.from("#ffffff").asPdfRbg(),
                        color:divisionColour2e(character.era, division).asPdfRbg(),
                        borderWidth: 0,
                        scale: 0.6
                    });
                }
            }
        } else if (character.type === CharacterType.KlingonWarrior) {
            page.moveTo(704, page.getHeight() - 63);

            page.drawSvgPath(Landscape2eCharacterSheet.klingonSymbolCircle, {
                borderColor: Landscape2eCharacterSheet.greyColour.asPdfRbg(),
                color: SimpleColor.from("#ffffff").asPdfRbg(),
                borderWidth: 1,
                scale: 0.6
            });

            page.drawSvgPath(Landscape2eCharacterSheet.klingonSymbol, {
                borderColor: Landscape2eCharacterSheet.greyColour.asPdfRbg(),
                color: redColour2e.asPdfRbg(),
                borderWidth: 0,
                scale: 0.6
            });

        } else if (character.type === CharacterType.Civilian || character.type === CharacterType.Child) {
            page.moveTo(695, page.getHeight() - 67);

            page.drawSvgPath(Landscape2eCharacterSheet.federationLaurels, {
                borderColor: greyColour2e.asPdfRbg(),
                color: greyColour2e.asPdfRbg(),
                borderWidth: 0,
                scale: 0.6
            });

            page.drawSvgPath(Landscape2eCharacterSheet.federationStarfield, {
                borderColor: greyColour2e.asPdfRbg(),
                color: greyColour2e.asPdfRbg(),
                borderWidth: 0,
                scale: 0.6
            });
        }
    }


    writeLabels(page: PDFPage, construct: Character) {
        const subHeadings = {
            "Construct.other.attributes": new Column(55.1, 287.2, 9.5, 211),
            "Construct.other.departments": new Column(286.8, 287.2, 9.5, 211),
        }

        if (construct.stereotype === Stereotype.Npc || construct.stereotype === Stereotype.SupportingCharacter) {
            subHeadings["Construct.other.specialRules"] = new Column(51.5, 361, 9.5, 162);
        } else {
            subHeadings["Construct.other.talents"] = new Column(51.5, 361, 9.5, 162);
        }

        labelWriter(page, subHeadings, construct.version,
            this.headingFont, 9, Landscape2eCharacterSheet.greyColour, TextAlign.Centre);

        labelWriter(page, {
                "Construct.attribute.control": new Column(56.8, 308, 8.5, 45),
                "Construct.attribute.daring": new Column(56.8, 332.9, 8.5, 45),
                "Construct.attribute.fitness": new Column(129.9, 308, 8.5, 45),
                "Construct.attribute.insight": new Column(129.9, 332.9, 8.5, 45),
                "Construct.attribute.presence": new Column(202.5, 308, 8.5, 45),
                "Construct.attribute.reason": new Column(202.5, 332.9, 8.5, 45),

                "Construct.discipline.command": new Column(289, 308, 8.5, 45),
                "Construct.discipline.conn": new Column(289, 332.9, 8.5, 45),
                "Construct.discipline.engineering": new Column(361.1, 308, 8.5, 45),
                "Construct.discipline.security": new Column(361.1, 332.9, 8.5, 45),
                "Construct.discipline.medicine": new Column(433.2, 308, 8.5, 45),
                "Construct.discipline.science": new Column(433.2, 332.9, 8.5, 45),
            }, construct.version,
            this.fonts.fontByType(FontType.Bold), 8, ((label) => labelColourProvider(construct.era, label)));

        labelWriter(page, {
            "Construct.other.name": new Column(55.4 + 3, 72.4 + 1, 6, 248.2 - 5),
            "Construct.other.pronouns": new Column(309.2 + 3, 72.4 + 1, 6, 86.1 - 5),
            "Construct.other.rank": new Column(55.4 + 3, 102 + 2, 6, 166 - 5),
            "Construct.other.assignment": new Column(227 + 3, 102 + 1, 6, 166 - 5),
            "Construct.other.characterRole": new Column(55.4 + 3, 131.3 + 1, 6, 248.2 - 5),
            "Construct.other.reputation": new Column(309.2 + 3, 131.3 + 1, 6, 86.1 - 5),
            "Construct.other.speciesAndTraits": new Column(55.4 + 3, 161 + 1, 6, 339.9 - 5),
            "Construct.other.environment": new Column(55.4 + 3, 190.8 + 1, 6, 166 - 5),
            "Construct.other.upbringing": new Column(227 + 3, 190.8 + 1, 6, 166 - 5),
            "Construct.other.careerPath": new Column(55.4 + 3, 220.1 + 1, 6, 166 - 5),
            "Construct.other.experience": new Column(227 + 3, 220.1 + 1, 6, 166 - 5),
            "Construct.other.careerEvent1": new Column(55.4 + 3, 249.4 + 1, 6, 166 - 5),
            "Construct.other.careerEvent2": new Column(227 + 3, 249.4 + 1, 6, 166 - 5),
            "Construct.other.focuses": new Column(561.5 + 3, 96.2 + 1, 6, 162.7 - 5),
            "Construct.other.pastimes": new Column(561.5 + 3, 268.1 + 1, 6, 162.7 - 5),
            "Construct.other.values": new Column(561.5 + 3, 303.6 + 1, 6, 162.7 - 5),
            "Construct.other.attacks": new Column(561.5 + 3, 427.7 + 1, 6, 162.7 - 5),
            "Construct.other.equipment": new Column(561.5 + 3, 502.9 + 1, 6, 162.7 - 5),
        }, construct.version,
        this.headingFont, 5, Landscape2eCharacterSheet.tealColour);

        labelWriter(page, {
                "Construct.other.determination": new Column(564.1, 77.8, 6, 70),
                "Construct.other.stress": new Column(421.2, 224.6, 6, 36.4),
            }, construct.version,
            this.headingFont, 5, Landscape2eCharacterSheet.greyColour, TextAlign.Left);

        labelWriter(page, {
                "Construct.other.resistance": new Column(506.8, 305, 6, 46.5)
            }, construct.version,
            this.headingFont, 5, Landscape2eCharacterSheet.greyColour, TextAlign.Centre);

    }

    writeRoleAndTalents(page: PDFPage, character: Character) {
        new TalentWriter(page, this.fonts, character.version).writeTalents(
            assembleWritableItems(character),
            Landscape2eCharacterSheet.talentsColumn1, 8);
    }

    createDeterminationBoxes(page: PDFPage, pdf: PDFDocument) {
        new CheckMarkMaker(page, pdf).createCheckMarksAndBoxes(
            [
                new Column(650.4, 77.1, 9.5, 9.5),
                new Column(665.2, 77.1, 9.5, 9.5),
                new Column(680, 77.1, 9.5, 9.5),
            ], "Determination ", Landscape2eCharacterSheet.greyColour
        );
    }

    createStressBoxes(page: PDFPage, pdf: PDFDocument, character: Character) {
        let columns = [];
        let startX = 464.9;
        let startY = 221.3;
        let gap = 478.8 - startX;

        let availableVerticalSpace = 4 * gap;
        let numberOfLines = Math.ceil(character.stress / 5);

        let verticalOffset = (availableVerticalSpace - numberOfLines * gap) / 2;

        for (let i = 0; i < character.stress; i++) {
            let x = startX + (gap * (i % 5));
            let y = startY + (gap * Math.floor(i / 5)) + verticalOffset;
            columns.push(new Column(x, y, 9.5, 9.5));
        }

        new CheckMarkMaker(page, pdf).createCheckMarksAndBoxes(columns, "Stress ",
            Landscape2eCharacterSheet.greyColour);
    }

    writeTitle(page: PDFPage) {
        const originalText = i18next.t("Sheet.text.title.alt").toLocaleUpperCase();
        let text = originalText;
        const fontSize = this.determineIdealFontWidth([ text ],
            Landscape2eCharacterSheet.headingColumn.width, 10, 7.5);
        const block = Landscape2eCharacterSheet.headingColumn;
        let width = this.headingFont.widthOfTextAtSize(text, fontSize);
        while (width > block.width) {
            text = text.substring(0, text.length-1);
            width = this.headingFont.widthOfTextAtSize(text + "...", fontSize);
        }

        if (text !== originalText) {
            text += "...";
        }

        const triangle = "M 60.232529,54.856579 V 44.842907 l 8.671875,5.009766 z m 0.580078,-1.001953 6.9375,-4.001953 -6.9375,-4.007813 z"


        let widthOfTab = Math.max(146.205, width + 35);
        let startOffset = 54.966797;

        let farthestEdge = widthOfTab + startOffset;
        let circle1 = farthestEdge - (189.83203 - 184.75613);
        let circle2 = farthestEdge - (189.83203 - 178.49414);


        const tab = "M 54.966797 40.257812 " +
            "C 48.704803 40.257812 43.626953 45.333709 43.626953 51.595703 " +
            "L 43.626953 79.257812 " +
            "L 44.046875 79.257812 " +
            "L 44.048828 70.263672 " +
            "C 44.048828 64.286678 48.911678 59.425781 54.888672 59.425781 " +
            "L " + farthestEdge + " 59.425781 " +
            "L " + farthestEdge + " 51.595703 " +
            "C " + farthestEdge + " 45.333709 " + circle1 + " 40.257812 " + circle2 + " 40.257812 " +
            "L 54.966797 40.257812 " +
            "z"

        page.moveTo(0, page.getHeight());

        page.drawSvgPath(tab, {
            borderColor: SimpleColor.from("#000000").asPdfRbg(),
            color: Landscape2eCharacterSheet.tealColour.asPdfRbg(),
            borderWidth: 0
        });

        page.drawSvgPath(triangle, {
            borderColor: SimpleColor.from("#000000").asPdfRbg(),
            color: SimpleColor.from("#ffffff").asPdfRbg(),
            borderWidth: 0
        });

        page.drawText(text, {
            x: block.start.x,
            y: page.getHeight() - (block.end.y),
            color: SimpleColor.from("#ffffff").asPdfRbg(),
            font: this.headingFont,
            size: fontSize
        });
    }

    populateForm(form: PDFForm, character: Character) {
        form.getFields().forEach(f => {
            if (f instanceof PDFTextField) {
                let textField = f as PDFTextField;
                if (textField.isMultiline() && (textField.getText() == null || textField.getText().length === 0)) {
                    textField.updateAppearances(this.formFont, staTextFieldAppearanceProvider(8));
                }
            }
        });

        super.populateForm(form, character);

        this.fillCharacterRole(form, character);
        this.fillPastimes(form, character);
        this.fillStressBox(form, character);
        this.fillCareerPath(form, character);
        this.fillExperience(form, character);
    }

    fillCharacterRole(form: PDFForm, character: Character) {
        this.fillField(form, "Character Role", character.assignmentWithoutShip);
    }

    fillAssignment(form: PDFForm, character: Character): void {
        this.fillField(form, "Assignment", character.assignedShip ?? "");
    }

    fillStressBox(form: PDFForm, character: Character): void {
        this.fillField(form, "Stress", "" + character.stress);
    }


    fillCareerPath(form: PDFForm, character: Character): void {
        let path = CharacterTypeModel.getByType(character.type)?.localizedName ?? "";
        if (character.educationStep) {
            path += " / " + TracksHelper.instance.getTrack(character.educationStep?.track, character.type, character.version).localizedName;
        }

        this.fillField(form, "Career Path", path);
    }

    fillEquipment(form: PDFForm, character: Character): void {
        const equipment = character.equipment.join(", ");
        this.fillField(form, "Equipment", equipment);
    }

    fillFocuses(form: PDFForm, character: Character): void {
        const focuses = character.focuses.join(", ");
        this.fillField(form, "Focuses", focuses);
    }

    fillPastimes(form: PDFForm, character: Character): void {
        const pastime = character.pastime?.join(", ") ?? "";
        this.fillField(form, "Pastimes", pastime);
    }

    fillValues(form: PDFForm, character: Character): void {
        const values = character.values.join("\n");
        this.fillField(form, "Values", values);
    }

    fillExperience(form: PDFForm, character: Character): void {
        if (character.careerStep?.career != null) {
            const career = CareersHelper.instance.getCareer(character.careerStep.career, character);
            this.fillField(form, "Experience", career.localizedName);
        }
    }

    fillWeapons(form: PDFForm, construct: Construct): void {
        const describer = new WeaponDescriber(construct.version, true);

        if (construct instanceof Character) {
            let attacks = construct.determineWeapons()
                .map(w =>
                    w.name + ": " +
                    describer.describeFully(w, construct).replace(CHALLENGE_DICE_NOTATION, "\u25B2"));

            this.fillField(form, "Attacks", attacks.join("\n"));
        }
    }
}